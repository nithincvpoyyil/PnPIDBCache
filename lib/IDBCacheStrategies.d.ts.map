{"version":3,"sources":["../src/IDBCacheStrategies.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAyB,MAAM,cAAc,CAAC;AAIzE;;;;;;;;;;;;;;GAcG;AAEH,wBAAsB,oBAAoB,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,kBAAkB,GAAG,OAAO,CAAC,CAAC,CAAC,CAiCnH;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,wBAAsB,8BAA8B,CAAC,CAAC,EACpD,GAAG,EAAE,MAAM,EACX,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EACb,MAAM,CAAC,EAAE,IAAI,EACb,QAAQ,CAAC,EAAE,kBAAkB,GAC5B,OAAO,CAAC,CAAC,CAAC,CAqCZ;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,wBAAsB,UAAU,CAAC,CAAC,EAChC,GAAG,EAAE,MAAM,EACX,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EACb,MAAM,CAAC,EAAE,IAAI,EACb,QAAQ,CAAC,EAAE,kBAAkB,GAC5B,OAAO,CAAC,CAAC,CAAC,CAgCZ;AAED;;;;;;;;;;;;;;GAcG;AACH,wBAAsB,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,kBAAkB,GAAG,OAAO,CAAC,CAAC,GAAG,SAAS,CAAC,CAoBrG","file":"IDBCacheStrategies.d.ts","sourcesContent":["import { ICustomStoreParams, IDBStorage, IIDBValue } from './IDBStorage';\r\n\r\nlet indexedDBStorageInstance: IDBStorage;\r\n\r\n/**\r\n * Stale-while-revalidate caching strategy without expiration\r\n *\r\n *\r\n * @param key - cache key value for the network request or item\r\n * @param p - request Promise object to fulfill network request\r\n * @param dbParams - custom indexed db store parameters. If this value is not passed, default values will be selected\r\n * @returns  Promise<T>\r\n *\r\n * Check link for more information: https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate\r\n *\r\n * @example\r\n * const reponse = await staleWhileRevalidate(\"key-1\", sp.web.select(\"Title\", \"Description\").get(),{dbName:'myAppcacheDB',storeName:'homePage'});\r\n *\r\n */\r\n\r\nexport async function staleWhileRevalidate<T>(key: string, p: Promise<T>, dbParams?: ICustomStoreParams): Promise<T> {\r\n  if (!dbParams) {\r\n    dbParams = { dbName: '', storeName: '' };\r\n  }\r\n\r\n  if (!indexedDBStorageInstance) {\r\n    indexedDBStorageInstance = new IDBStorage(dbParams);\r\n  }\r\n\r\n  if (!indexedDBStorageInstance.indexedDBError) {\r\n    const value = <T | undefined>await indexedDBStorageInstance.getItem(key);\r\n\r\n    if (value) {\r\n      // update cache once we have a result\r\n      p.then((u) => {\r\n        return indexedDBStorageInstance.setItem(key, u);\r\n      });\r\n\r\n      // response return from cache\r\n      return value;\r\n    }\r\n  }\r\n\r\n  // Not in cache so we need to wait for the value\r\n  const result = await p;\r\n\r\n  // Set Cache\r\n  if (!indexedDBStorageInstance.indexedDBError) {\r\n    indexedDBStorageInstance.setItem(key, result);\r\n  }\r\n\r\n  // Return from Promise\r\n  return result;\r\n}\r\n\r\n/**\r\n * Stale-while-revalidate caching strategy with expiration\r\n *\r\n *\r\n * @param key - cache key value for the network request or item\r\n * @param p - request Promise object to fulfill network request\r\n * @param expiry - Date object for the cache expiration. If this value is  not passed, default value will be taken current time + 1 hour\r\n * @param dbParams - optional custom indexed db store parameters. If this value is not passed, default values will be selected\r\n * @returns  Promise<T>\r\n *\r\n * Check link for more information: https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate\r\n *\r\n * @example\r\n * let expiry = new Date(new Date().getTme()+980000);\r\n * let request = sp.web.select(\"Title\", \"Description\").get()\r\n * const reponse = await staleWhileRevalidateWithExpiry(\"key-1\", request, expiry,{dbName:'myAppcacheDB',storeName:'homePage'});\r\n *\r\n */\r\nexport async function staleWhileRevalidateWithExpiry<T>(\r\n  key: string,\r\n  p: Promise<T>,\r\n  expiry?: Date,\r\n  dbParams?: ICustomStoreParams,\r\n): Promise<T> {\r\n  if (!indexedDBStorageInstance) {\r\n    indexedDBStorageInstance = new IDBStorage(dbParams);\r\n  }\r\n\r\n  if (!dbParams) {\r\n    dbParams = { dbName: '', storeName: '' };\r\n  }\r\n  let expiryDate = expiry && typeof Date === 'object' ? expiry : new Date(new Date().getTime() + 1000 * 60 * 10); // 10 minutes\r\n\r\n  if (!indexedDBStorageInstance.indexedDBError) {\r\n    const value = <IIDBValue<T>>await indexedDBStorageInstance.getItem(key);\r\n    let isExpired = value.expiry <= new Date();\r\n\r\n    if (value && value.indexedDBCache && !isExpired) {\r\n      // update cache once we have a result\r\n      p.then((u) => {\r\n        let response: IIDBValue = { expiry: expiryDate, data: u, indexedDBCache: 1 };\r\n        return indexedDBStorageInstance.setItem(key, response);\r\n      });\r\n\r\n      // response return from cache\r\n      return value.data;\r\n    }\r\n  }\r\n\r\n  // not in cache or expired, so we need to wait for the value\r\n  const result = await p;\r\n\r\n  // Set Cache\r\n  if (!indexedDBStorageInstance.indexedDBError) {\r\n    let data: IIDBValue = { expiry: expiryDate, data: result, indexedDBCache: 1 };\r\n    indexedDBStorageInstance.setItem(key, data);\r\n  }\r\n\r\n  // return from promise\r\n  return result;\r\n}\r\n\r\n/**\r\n *\r\n * cache-first caching strategy with expiration\r\n *\r\n * @param key - cache key value for the network request or item\r\n * @param p - request Promise object to fulfill network request\r\n * @param expiry - Date object for the cache expiration. If this value is  not passed, default value will be taken current time + 1 hour\r\n * @param dbParams - optional custom indexed db store parameters. If this value is not passed, default values will be selected\r\n * @returns  Promise<T>\r\n *\r\n * Check link for more information: https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network\r\n *\r\n * @example\r\n * let expiry = new Date(new Date().getTme()+980000);\r\n * let request = sp.web.select(\"Title\", \"Description\").get()\r\n * const reponse = await cacheFirst(\"key-1\", request, expiry,{dbName:'myAppcacheDB',storeName:'homePage'});\r\n *\r\n */\r\nexport async function cacheFirst<T>(\r\n  key: string,\r\n  p: Promise<T>,\r\n  expiry?: Date,\r\n  dbParams?: ICustomStoreParams,\r\n): Promise<T> {\r\n  if (!dbParams) {\r\n    dbParams = { dbName: '', storeName: '' };\r\n  }\r\n\r\n  if (!indexedDBStorageInstance) {\r\n    indexedDBStorageInstance = new IDBStorage(dbParams);\r\n  }\r\n\r\n  let expiryDate = expiry && typeof Date === 'object' ? expiry : new Date(new Date().getTime() + 1000 * 60 * 10); // 10 minutes\r\n\r\n  if (!indexedDBStorageInstance.indexedDBError) {\r\n    const value = <IIDBValue<T>>await indexedDBStorageInstance.getItem(key);\r\n    let isExpired = value.expiry <= new Date();\r\n\r\n    // Return from Cache\r\n    if (value && value.indexedDBCache && !isExpired) {\r\n      return value.data;\r\n    }\r\n  }\r\n\r\n  // Not In Cache so we need to wait for the value\r\n  const result = await p;\r\n\r\n  // Set Cache\r\n  if (!indexedDBStorageInstance.indexedDBError) {\r\n    let data: IIDBValue = { expiry: expiryDate, data: result, indexedDBCache: 1 };\r\n    indexedDBStorageInstance.setItem(key, data);\r\n  }\r\n\r\n  // Return from Promise\r\n  return result;\r\n}\r\n\r\n/**\r\n *\r\n * cache-only caching strategy with expiration\r\n *\r\n *\r\n * @param key - cache key value for the network request or item\r\n * @param dbParams - optional custom indexed db store parameters. If this value is not passed, default values will be selected\r\n * @returns  Promise<T | undefined>\r\n *\r\n * Check link for more information: https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-only\r\n *\r\n * @example\r\n *\r\n * const reponse = await cacheOnly(\"key-1\", {dbName:'myAppcacheDB',storeName:'homePage'});\r\n */\r\nexport async function cacheOnly<T>(key: string, dbParams?: ICustomStoreParams): Promise<T | undefined> {\r\n  if (!dbParams) {\r\n    dbParams = { dbName: '', storeName: '' };\r\n  }\r\n\r\n  if (!indexedDBStorageInstance) {\r\n    indexedDBStorageInstance = new IDBStorage(dbParams);\r\n  }\r\n\r\n  if (!indexedDBStorageInstance.indexedDBError) {\r\n    const value = <IIDBValue<T>>await indexedDBStorageInstance.getItem(key);\r\n    let isExpired = value.expiry <= new Date();\r\n\r\n    // Return from Cache\r\n    if (value && value.indexedDBCache && !isExpired) {\r\n      return value.data;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n"]}